"""
Enhanced code explanation page with file upload functionality
"""
import streamlit as st
import os
from datetime import datetime
from utils.state_manager import StateManager
from utils.api_service import api_service
from utils.code_formatter import CodeFormatter
from components.code_components import CodeEditor, CodeDisplay, ExplanationCard
from utils.file_handler import FileHandler

def detect_language_from_extension(filename: str) -> str:
    """Detect programming language from file extension"""
    ext = os.path.splitext(filename)[1].lower()
    language_map = {
        '.py': 'Python',
        '.js': 'JavaScript',
        '.java': 'Java',
        '.cpp': 'C++',
        '.c': 'C',
        '.go': 'Go',
        '.sql': 'SQL',
        '.rb': 'Ruby',
        '.rs': 'Rust',
        '.php': 'PHP',
        '.html': 'HTML',
        '.css': 'CSS'
    }
    return language_map.get(ext, 'Python')

def handle_file_upload():
    """Handle file upload and extract code content"""
    uploaded_file = st.file_uploader(
        "Upload a code file",
        type=['py', 'js', 'java', 'cpp', 'c', 'go', 'sql', 'rb', 'rs', 'php', 'html', 'css'],
        help="Upload a code file to explain. Max size: 100KB"
    )
    
    if uploaded_file is not None:
        # Validate file
        if not FileHandler.is_valid_file(uploaded_file):
            st.error("Invalid file. Please check file type and size (max 100KB).")
            return None, None
        
        try:
            # Read file content
            content = uploaded_file.read().decode('utf-8')
            language = detect_language_from_extension(uploaded_file.name)
            
            st.success(f"File '{uploaded_file.name}' uploaded successfully!")
            st.info(f"Detected language: {language}")
            
            return content, language
            
        except UnicodeDecodeError:
            st.error("Could not read file. Please ensure it's a text file with valid encoding.")
            return None, None
        except Exception as e:
            st.error(f"Error reading file: {str(e)}")
            return None, None
    
    return None, None

def handle_explanation_request(code, language, difficulty, focus_areas, show_line_by_line, include_examples):
    """Handle the code explanation request"""
    
    if not code.strip():
        st.warning("Please enter code to explain or upload a file.")
        return
        
    with st.spinner("Generating explanation..."):
        try:
            # Get provider settings from state
            provider_settings = StateManager.get_provider_settings()
            
            # Call API service
            result = api_service.explain_code(
                code=code,
                language=language,
                difficulty=difficulty,
                focus_areas=focus_areas,
                line_by_line=show_line_by_line,
                include_examples=include_examples,
                provider=provider_settings["provider"]
            )
            
            # Extract explanation
            explanation = result.get("explanation", "")
            
            # Update state
            StateManager.set_code(code)
            StateManager.set_explanation(explanation)
            
            # Create a summary (first 150 chars)
            explanation_summary = explanation[:150] + "..." if len(explanation) > 150 else explanation
            code_snippet = code[:150] + "..." if len(code) > 150 else code
            
            # Add to history with correct format
            StateManager.add_to_history({
                "mode": "Explanation",
                "full_code": code,
                "explanation": explanation,
                "language": language,
                "timestamp": datetime.now().isoformat()
            })
            
            return explanation
            
        except Exception as e:
            st.error(f"Failed to generate explanation: {str(e)}")
            return None

def create_explanation_download_content(code: str, explanation: str, language: str, 
                                      focus_areas: list, difficulty: str) -> str:
    """Create formatted content for explanation download"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    content = f"""Code Explanation Report
======================

Generated on: {timestamp}
Language: {language}
Difficulty Level: {difficulty}
Focus Areas: {', '.join(focus_areas)}

Original Code:
--------------
{code}

Explanation:
------------
{explanation}

---
Generated by Synthex Code Assistant
"""
    return content

def render():
    """Render the enhanced code explanation page"""
    
    # Initialize components
    formatter = CodeFormatter()
    code_editor = CodeEditor(formatter)
    code_display = CodeDisplay(formatter)
    explanation_card = ExplanationCard()
    
    st.header("Code Explanation")
    
    # Input method selection
    st.markdown("### Choose Input Method")
    input_method = st.radio(
        "How would you like to provide code?",
        ["Type/Paste Code", "Upload File"],
        horizontal=True
    )
    
    code = ""
    language = "Python"
    
    if input_method == "Upload File":
        # File upload section
        st.markdown("### Upload Code File")
        uploaded_code, detected_language = handle_file_upload()
        
        if uploaded_code:
            code = uploaded_code
            language = detected_language
            
            # Show preview of uploaded code
            with st.expander("ðŸ“„ Preview Uploaded Code", expanded=True):
                st.code(code[:500] + "..." if len(code) > 500 else code, language=language.lower())
    
    else:
        # Manual code input area
        st.markdown("### Enter your code")
        code = code_editor.render(
            key="code_input",
            label="Paste your code here:",
            height=300,
            default_value=st.session_state.get("current_code", ""),
            help_text="Paste the code you want explained"
        )
    
    # Options for explanation in two columns
    col1, col2 = st.columns(2)
    
    # Left column - Focus areas
    with col1:
        focus_areas = st.multiselect(
            "Focus Areas",
            ["Logic Flow", "Time Complexity", "Space Complexity", "Best Practices", "Edge Cases"],
            default=["Logic Flow"],
            help="Select what aspects to focus on in the explanation"
        )
    
    # Right column - Options
    with col2:
        include_examples = st.checkbox("Include examples", value=True)
        show_line_by_line = st.checkbox("Line-by-line explanation", value=False)
    
    # Language and difficulty selection
    col1, col2 = st.columns(2)
    
    # Language selection - left column (override if file was uploaded)
    with col1:
        if input_method == "Type/Paste Code":
            language = st.selectbox(
                "Language",
                ["Python", "JavaScript", "Java", "C++", "Go", "SQL", "Ruby", "Rust", "PHP"],
                index=0 if st.session_state.get("language") == "Python" else 
                      ["Python", "JavaScript", "Java", "C++", "Go", "SQL", "Ruby", "Rust", "PHP"].index(st.session_state.get("language", "Python"))
            )
        else:
            st.selectbox(
                "Language (Auto-detected)",
                [language],
                disabled=True,
                help="Language was automatically detected from the uploaded file"
            )
    
    # Difficulty selection - right column
    with col2:
        explanation_level = st.select_slider(
            "Explanation Detail Level",
            options=["Beginner", "Intermediate", "Advanced"],
            value="Intermediate",
            help="Choose explanation complexity:\n" +
                 "â€¢ Beginner: Basic concepts, step-by-step\n" +
                 "â€¢ Intermediate: More technical details\n" +
                 "â€¢ Advanced: In-depth analysis & optimizations"
        )
    
    # Explain button
    if st.button("Explain Code", type="primary", disabled=not code.strip()):
        explanation = handle_explanation_request(
            code, language, explanation_level, focus_areas, 
            show_line_by_line, include_examples
        )
    
    # Display explanation if available
    if "current_explanation" in st.session_state and st.session_state.current_explanation:
        explanation_card.render(
            explanation=st.session_state.current_explanation,
            title="Explanation",
            container_class="explanation-container"
        )
        
        # Download explanation section
        st.markdown("### Download Explanation")
        col1, col2 = st.columns(2)
        
        with col1:
            download_format = st.selectbox(
                "Download format:",
                ["Markdown (.md)", "Text (.txt)"],
                key="explanation_download_format"
            )
        
        with col2:
            if download_format == "Markdown (.md)":
                markdown_content = f"""# Code Explanation

**Language:** {language}  
**Difficulty Level:** {explanation_level}  
**Focus Areas:** {', '.join(focus_areas)}  
**Generated on:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Original Code
```{language.lower()}
{st.session_state.current_code}
```

## Explanation
{st.session_state.current_explanation}

---
*Generated by Synthex Code Assistant*
"""
                st.download_button(
                    label="ðŸ“¥ Download as Markdown",
                    data=markdown_content,
                    file_name=f"code_explanation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                    mime="text/markdown"
                )
            else:
                text_content = create_explanation_download_content(
                    st.session_state.current_code,
                    st.session_state.current_explanation,
                    language,
                    focus_areas,
                    explanation_level
                )
                st.download_button(
                    label="ðŸ“¥ Download as Text",
                    data=text_content,
                    file_name=f"code_explanation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain"
                )
        
        # Follow-up options
        st.markdown("### Ask a Follow-up Question")
        follow_up_question = st.text_input(
            "Have a specific question about this code?",
            placeholder="Example: What's the time complexity of this algorithm?"
        )
        
        if st.button("Submit Question", key="submit_followup"):
            if follow_up_question:
                with st.spinner("Generating answer..."):
                    try:
                        # Get provider settings
                        provider_settings = StateManager.get_provider_settings()
                        
                        # Prepare payload
                        payload = {
                            "question": follow_up_question,
                            "context": {
                                "code": st.session_state.current_code,
                                "language": language.lower(),
                                "previous_explanation": st.session_state.current_explanation
                            },
                            "provider": provider_settings["provider"]
                        }
                        
                        # In a real implementation, we would call the API service here
                        # This is a placeholder since the API endpoint wasn't in the provided code
                        st.info("This feature would call the follow-up API endpoint in a complete implementation.")
                        
                    except Exception as e:
                        st.error(f"Error processing follow-up question: {str(e)}")
            else:
                st.warning("Please enter a follow-up question.")
                
    # Tips for better explanations
    with st.expander("Tips for Better Explanations"):
        st.markdown("""
        ### How to Get Better Code Explanations
        
        1. **Upload complete files** or provide complete code rather than fragments
        2. **Choose focus areas** that are most relevant to your needs
        3. **Adjust difficulty level** based on your familiarity with the concepts
        4. **Use line-by-line mode** for detailed understanding of complex algorithms
        5. **Ask follow-up questions** to dive deeper into specific aspects
        6. **Supported file types**: .py, .js, .java, .cpp, .c, .go, .sql, .rb, .rs, .php, .html, .css
        """)