"""
Enhanced code explanation page with file upload functionality
"""
import streamlit as st
import os
from datetime import datetime
from utils.state_manager import StateManager
from utils.api_service import api_service
from utils.code_formatter import CodeFormatter
from components.code_components import CodeEditor, CodeDisplay, ExplanationCard
from utils.file_handler import FileHandler

def detect_language_from_extension(filename: str) -> str:
    """Detect programming language from file extension"""
    ext = os.path.splitext(filename)[1].lower()
    language_map = {
        '.py': 'Python',
        '.js': 'JavaScript',
        '.java': 'Java',
        '.cpp': 'C++',
        '.c': 'C',
        '.go': 'Go',
        '.sql': 'SQL',
        '.rb': 'Ruby',
        '.rs': 'Rust',
        '.php': 'PHP',
        '.html': 'HTML',
        '.css': 'CSS'
    }
    return language_map.get(ext, 'Python')

def handle_file_upload():
    """Handle file upload and extract code content"""
    uploaded_file = st.file_uploader(
        "Upload a code file",
        type=['py', 'js', 'java', 'cpp', 'c', 'go', 'sql', 'rb', 'rs', 'php', 'html', 'css'],
        help="Upload a code file to explain. Max size: 100KB"
    )
    
    if uploaded_file is not None:
        # Validate file
        if not FileHandler.is_valid_file(uploaded_file):
            st.error("Invalid file. Please check file type and size (max 100KB).")
            return None, None
        
        try:
            # Read file content
            content = uploaded_file.read().decode('utf-8')
            language = detect_language_from_extension(uploaded_file.name)
            
            st.success(f"File '{uploaded_file.name}' uploaded successfully!")
            st.info(f"Detected language: {language}")
            
            return content, language
            
        except UnicodeDecodeError:
            st.error("Could not read file. Please ensure it's a text file with valid encoding.")
            return None, None
        except Exception as e:
            st.error(f"Error reading file: {str(e)}")
            return None, None
    
    return None, None

def handle_explanation_request(code, language, difficulty, focus_areas, show_line_by_line, include_examples):
    """Handle the code explanation request"""
    
    if not code.strip():
        st.warning("Please enter code to explain or upload a file.")
        return
        
    with st.spinner("Generating explanation..."):
        try:
            # Get provider settings from state
            provider_settings = StateManager.get_provider_settings()
            
            # Call API service
            result = api_service.explain_code(
                code=code,
                language=language,
                difficulty=difficulty,
                focus_areas=focus_areas,
                line_by_line=show_line_by_line,
                include_examples=include_examples,
                provider=provider_settings["provider"]
            )
            
            # Extract explanation
            explanation = result.get("explanation", "")
            
            # Update state
            StateManager.set_code(code)
            StateManager.set_explanation(explanation)
            
            # Create a summary (first 150 chars)
            explanation_summary = explanation[:150] + "..." if len(explanation) > 150 else explanation
            code_snippet = code[:150] + "..." if len(code) > 150 else code
            
            # Add to history with correct format
            StateManager.add_to_history({
                "mode": "Explanation",
                "full_code": code,
                "explanation": explanation,
                "language": language,
                "timestamp": datetime.now().isoformat()
            })
            
            return explanation
            
        except Exception as e:
            st.error(f"Failed to generate explanation: {str(e)}")
            return None
def create_markdown_content(code: str, explanation: str, language: str, 
                          focus_areas: list, difficulty: str) -> str:
    """Create formatted markdown content for explanation download"""
    return f"""# Code Explanation Report

## Overview
- **Language:** {language}
- **Detail Level:** {difficulty}
- **Focus Areas:** {', '.join(focus_areas)}
- **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Original Code
```{language.lower()}
{code}
```

## Detailed Explanation
{explanation}

## Focus Areas Analysis
{', '.join(f'- **{area}**' for area in focus_areas)}

---
*Generated by Synthex Code Assistant*
"""
def create_explanation_download_content(code: str, explanation: str, language: str, 
                                      focus_areas: list, difficulty: str) -> str:
    """Create formatted content for explanation download"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    content = f"""Code Explanation Report
======================

Generated on: {timestamp}
Language: {language}
Difficulty Level: {difficulty}
Focus Areas: {', '.join(focus_areas)}

Original Code:
--------------
{code}

Explanation:
------------
{explanation}

---
Generated by Synthex Code Assistant
"""
    return content

def render():
    """Render the enhanced code explanation page"""
        # Initialize components
    formatter = CodeFormatter()
    code_editor = CodeEditor(formatter)
    code_display = CodeDisplay(formatter)
    explanation_card = ExplanationCard()
    # Enhanced header with styling
    st.markdown("""
    <div class='header-container'>
        <h1>üîç Code Explanation</h1>
        <p class='subtitle'>Get detailed explanations of your code with AI assistance</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Main content in two columns
    left_col, right_col = st.columns([2, 1])
    
    with left_col:
        # Input method selection with enhanced styling
        st.markdown("### üìù Input Method")
        input_method = st.radio(
            "How would you like to provide code?",
            ["‚úèÔ∏è Type/Paste Code", "üìÅ Upload File"],
            horizontal=True,
            format_func=lambda x: x.split(" ", 1)[1]  # Remove emoji for actual value
        )
        
        code = ""
        language = "Python"
        
        # File upload or code input section
        if "üìÅ Upload File" in input_method:
            with st.expander("üì§ Upload Code File", expanded=True):
                uploaded_code, detected_language = handle_file_upload()
                
                if uploaded_code:
                    code = uploaded_code
                    language = detected_language
                    st.markdown("#### üìÑ Preview")
                    st.code(code[:500] + "..." if len(code) > 500 else code, 
                           language=language.lower())
        else:
            code = code_editor.render(
                key="code_input",
                label="‚ú® Enter your code here:",
                height=300,
                default_value=st.session_state.get("current_code", ""),
                help_text="Paste the code you want explained"
            )
        
        # Advanced options in a clean layout
        with st.expander("‚öôÔ∏è Explanation Options", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                focus_areas = st.multiselect(
                    "üéØ Focus Areas",
                    ["Logic Flow", "Time Complexity", "Space Complexity", 
                     "Best Practices", "Edge Cases"],
                    default=["Logic Flow"],
                    help="Select aspects to focus on"
                )
                
                if input_method == "‚úèÔ∏è Type/Paste Code":
                    language = st.selectbox(
                        "üî§ Language",
                        ["Python", "JavaScript", "Java", "C++", "Go", "SQL", 
                         "Ruby", "Rust", "PHP"],
                        index=0 if st.session_state.get("language") == "Python" 
                        else ["Python", "JavaScript", "Java", "C++", "Go", "SQL", 
                              "Ruby", "Rust", "PHP"].index(
                                  st.session_state.get("language", "Python"))
                    )
            
            with col2:
                explanation_level = st.select_slider(
                    "üìä Detail Level",
                    options=["Beginner", "Intermediate", "Advanced"],
                    value="Intermediate"
                )
                
                include_examples = st.toggle("üìù Include Examples", value=True)
                show_line_by_line = st.toggle("‚ÜîÔ∏è Line-by-line Explanation", 
                                            value=False)
        
        # Explain button with enhanced styling
        if st.button("üöÄ Explain Code", type="primary", 
                    disabled=not code.strip(), use_container_width=True):
            explanation = handle_explanation_request(
                code, language, explanation_level, focus_areas,
                show_line_by_line, include_examples
            )
    
    # Right sidebar with helpful information
    with right_col:
        st.markdown("### üí° Tips for Better Results")
        st.info("""
        - Provide complete, working code
        - Include necessary imports
        - Format your code properly
        - Specify areas you want to focus on
        - Choose appropriate detail level
        """)
        
        st.markdown("### üîç What You'll Get")
        st.success("""
        - Detailed code explanation
        - Logic flow analysis
        - Performance insights
        - Best practices
        - Example usage
        - Line-by-line breakdown (optional)
        """)
    
    # Display explanation if available
    if "current_explanation" in st.session_state and st.session_state.current_explanation:
        st.markdown("---")
        st.markdown("### üìë Explanation Results")
        
        # Metrics display
        metric_cols = st.columns(3)
        with metric_cols[0]:
            st.metric("Language", language)
        with metric_cols[1]:
            st.metric("Detail Level", explanation_level)
        with metric_cols[2]:
            st.metric("Focus Areas", len(focus_areas))
        
        # Explanation card with enhanced styling
        explanation_card.render(
            explanation=st.session_state.current_explanation,
            title="üîç Detailed Explanation",
            container_class="explanation-container"
        )
        
        # Download section with improved layout
        st.markdown("### üíæ Export Options")
        download_cols = st.columns(2)
        
        with download_cols[0]:
            download_format = st.selectbox(
                "Select Format:",
                ["üìù Markdown (.md)", "üìÑ Text (.txt)"],
                key="explanation_download_format"
            )
        
        with download_cols[1]:
            if "Markdown" in download_format:
                st.download_button(
                    label="üì• Download as Markdown",
                    data=create_markdown_content(st.session_state.current_code,
                                              st.session_state.current_explanation,
                                              language, focus_areas, 
                                              explanation_level),
                    file_name=f"explanation_{datetime.now():%Y%m%d_%H%M%S}.md",
                    mime="text/markdown"
                )
            else:
                st.download_button(
                    label="üì• Download as Text",
                    data=create_explanation_download_content(
                        st.session_state.current_code,
                        st.session_state.current_explanation,
                        language, focus_areas, explanation_level
                    ),
                    file_name=f"explanation_{datetime.now():%Y%m%d_%H%M%S}.txt",
                    mime="text/plain"
                )
        
        # Follow-up options
        st.markdown("### Ask a Follow-up Question")
        follow_up_question = st.text_input(
            "Have a specific question about this code?",
            placeholder="Example: What's the time complexity of this algorithm?"
        )
        
        if st.button("Submit Question", key="submit_followup"):
            if follow_up_question:
                with st.spinner("Generating answer..."):
                    try:
                        # Get provider settings
                        provider_settings = StateManager.get_provider_settings()
                        
                        # Prepare payload
                        payload = {
                            "question": follow_up_question,
                            "context": {
                                "code": st.session_state.current_code,
                                "language": language.lower(),
                                "previous_explanation": st.session_state.current_explanation
                            },
                            "provider": provider_settings["provider"]
                        }
                        
                        # In a real implementation, we would call the API service here
                        # This is a placeholder since the API endpoint wasn't in the provided code
                        st.info("This feature would call the follow-up API endpoint in a complete implementation.")
                        
                    except Exception as e:
                        st.error(f"Error processing follow-up question: {str(e)}")
            else:
                st.warning("Please enter a follow-up question.")
                
    # Tips for better explanations
    with st.expander("Tips for Better Explanations"):
        st.markdown("""
        ### How to Get Better Code Explanations
        
        1. **Upload complete files** or provide complete code rather than fragments
        2. **Choose focus areas** that are most relevant to your needs
        3. **Adjust difficulty level** based on your familiarity with the concepts
        4. **Use line-by-line mode** for detailed understanding of complex algorithms
        5. **Ask follow-up questions** to dive deeper into specific aspects
        6. **Supported file types**: .py, .js, .java, .cpp, .c, .go, .sql, .rb, .rs, .php, .html, .css
        """)